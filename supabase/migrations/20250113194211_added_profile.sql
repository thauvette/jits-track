create table "public"."Profile" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "default_round_length" bigint default '360'::bigint,
    "display_name" character varying,
    "belt" bigint default '1'::bigint
);


alter table "public"."Profile" enable row level security;

CREATE UNIQUE INDEX "Profile_pkey" ON public."Profile" USING btree (id);

CREATE UNIQUE INDEX "Profile_userId_key" ON public."Profile" USING btree (user_id);

alter table "public"."Profile" add constraint "Profile_pkey" PRIMARY KEY using index "Profile_pkey";

alter table "public"."Profile" add constraint "Profile_userId_key" UNIQUE using index "Profile_userId_key";

alter table "public"."Profile" add constraint "Profile_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Profile" validate constraint "Profile_user_id_fkey";

grant delete on table "public"."Profile" to "anon";

grant insert on table "public"."Profile" to "anon";

grant references on table "public"."Profile" to "anon";

grant select on table "public"."Profile" to "anon";

grant trigger on table "public"."Profile" to "anon";

grant truncate on table "public"."Profile" to "anon";

grant update on table "public"."Profile" to "anon";

grant delete on table "public"."Profile" to "authenticated";

grant insert on table "public"."Profile" to "authenticated";

grant references on table "public"."Profile" to "authenticated";

grant select on table "public"."Profile" to "authenticated";

grant trigger on table "public"."Profile" to "authenticated";

grant truncate on table "public"."Profile" to "authenticated";

grant update on table "public"."Profile" to "authenticated";

grant delete on table "public"."Profile" to "service_role";

grant insert on table "public"."Profile" to "service_role";

grant references on table "public"."Profile" to "service_role";

grant select on table "public"."Profile" to "service_role";

grant trigger on table "public"."Profile" to "service_role";

grant truncate on table "public"."Profile" to "service_role";

grant update on table "public"."Profile" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."Profile"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for users based on user_id"
on "public"."Profile"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."Profile"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



