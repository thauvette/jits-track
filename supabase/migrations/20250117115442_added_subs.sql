create table "public"."Subs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."Subs" enable row level security;

create table "public"."Subs_against" (
    "id" bigint generated by default as identity not null,
    "roll" bigint not null,
    "sub" bigint not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."Subs_against" enable row level security;

create table "public"."Subs_for" (
    "id" bigint generated by default as identity not null,
    "roll" bigint not null,
    "sub" bigint not null,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."Subs_for" enable row level security;

alter table "public"."Rolls" add column "duration_seconds" bigint;

CREATE UNIQUE INDEX "Subs_against_pkey" ON public."Subs_against" USING btree (id);

CREATE UNIQUE INDEX "Subs_for_pkey" ON public."Subs_for" USING btree (id);

CREATE UNIQUE INDEX subs_pkey ON public."Subs" USING btree (id);

alter table "public"."Subs" add constraint "subs_pkey" PRIMARY KEY using index "subs_pkey";

alter table "public"."Subs_against" add constraint "Subs_against_pkey" PRIMARY KEY using index "Subs_against_pkey";

alter table "public"."Subs_for" add constraint "Subs_for_pkey" PRIMARY KEY using index "Subs_for_pkey";

alter table "public"."Subs" add constraint "subs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs" validate constraint "subs_user_id_fkey";

alter table "public"."Subs_against" add constraint "Subs_against_roll_fkey" FOREIGN KEY (roll) REFERENCES "Rolls"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_against" validate constraint "Subs_against_roll_fkey";

alter table "public"."Subs_against" add constraint "Subs_against_sub_fkey" FOREIGN KEY (sub) REFERENCES "Subs"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_against" validate constraint "Subs_against_sub_fkey";

alter table "public"."Subs_against" add constraint "Subs_against_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_against" validate constraint "Subs_against_user_id_fkey";

alter table "public"."Subs_for" add constraint "Subs_for_roll_fkey" FOREIGN KEY (roll) REFERENCES "Rolls"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_for" validate constraint "Subs_for_roll_fkey";

alter table "public"."Subs_for" add constraint "Subs_for_sub_fkey" FOREIGN KEY (sub) REFERENCES "Subs"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_for" validate constraint "Subs_for_sub_fkey";

alter table "public"."Subs_for" add constraint "Subs_for_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."Subs_for" validate constraint "Subs_for_user_id_fkey";

grant delete on table "public"."Subs" to "anon";

grant insert on table "public"."Subs" to "anon";

grant references on table "public"."Subs" to "anon";

grant select on table "public"."Subs" to "anon";

grant trigger on table "public"."Subs" to "anon";

grant truncate on table "public"."Subs" to "anon";

grant update on table "public"."Subs" to "anon";

grant delete on table "public"."Subs" to "authenticated";

grant insert on table "public"."Subs" to "authenticated";

grant references on table "public"."Subs" to "authenticated";

grant select on table "public"."Subs" to "authenticated";

grant trigger on table "public"."Subs" to "authenticated";

grant truncate on table "public"."Subs" to "authenticated";

grant update on table "public"."Subs" to "authenticated";

grant delete on table "public"."Subs" to "service_role";

grant insert on table "public"."Subs" to "service_role";

grant references on table "public"."Subs" to "service_role";

grant select on table "public"."Subs" to "service_role";

grant trigger on table "public"."Subs" to "service_role";

grant truncate on table "public"."Subs" to "service_role";

grant update on table "public"."Subs" to "service_role";

grant delete on table "public"."Subs_against" to "anon";

grant insert on table "public"."Subs_against" to "anon";

grant references on table "public"."Subs_against" to "anon";

grant select on table "public"."Subs_against" to "anon";

grant trigger on table "public"."Subs_against" to "anon";

grant truncate on table "public"."Subs_against" to "anon";

grant update on table "public"."Subs_against" to "anon";

grant delete on table "public"."Subs_against" to "authenticated";

grant insert on table "public"."Subs_against" to "authenticated";

grant references on table "public"."Subs_against" to "authenticated";

grant select on table "public"."Subs_against" to "authenticated";

grant trigger on table "public"."Subs_against" to "authenticated";

grant truncate on table "public"."Subs_against" to "authenticated";

grant update on table "public"."Subs_against" to "authenticated";

grant delete on table "public"."Subs_against" to "service_role";

grant insert on table "public"."Subs_against" to "service_role";

grant references on table "public"."Subs_against" to "service_role";

grant select on table "public"."Subs_against" to "service_role";

grant trigger on table "public"."Subs_against" to "service_role";

grant truncate on table "public"."Subs_against" to "service_role";

grant update on table "public"."Subs_against" to "service_role";

grant delete on table "public"."Subs_for" to "anon";

grant insert on table "public"."Subs_for" to "anon";

grant references on table "public"."Subs_for" to "anon";

grant select on table "public"."Subs_for" to "anon";

grant trigger on table "public"."Subs_for" to "anon";

grant truncate on table "public"."Subs_for" to "anon";

grant update on table "public"."Subs_for" to "anon";

grant delete on table "public"."Subs_for" to "authenticated";

grant insert on table "public"."Subs_for" to "authenticated";

grant references on table "public"."Subs_for" to "authenticated";

grant select on table "public"."Subs_for" to "authenticated";

grant trigger on table "public"."Subs_for" to "authenticated";

grant truncate on table "public"."Subs_for" to "authenticated";

grant update on table "public"."Subs_for" to "authenticated";

grant delete on table "public"."Subs_for" to "service_role";

grant insert on table "public"."Subs_for" to "service_role";

grant references on table "public"."Subs_for" to "service_role";

grant select on table "public"."Subs_for" to "service_role";

grant trigger on table "public"."Subs_for" to "service_role";

grant truncate on table "public"."Subs_for" to "service_role";

grant update on table "public"."Subs_for" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."Subs"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."Subs"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."Subs_against"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."Subs_against"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."Subs_for"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."Subs_for"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



