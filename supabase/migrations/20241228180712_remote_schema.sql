create table "public"."Rolls" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "date" date not null default now(),
    "teammate_id" bigint not null,
    "owner_id" uuid not null default auth.uid(),
    "session" bigint
);


alter table "public"."Rolls" enable row level security;

create table "public"."Sessions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "duration_seconds" bigint,
    "coach" bigint,
    "avg_heart_rate" bigint,
    "calories" bigint,
    "type" text,
    "user_id" uuid not null default auth.uid(),
    "date" date not null
);


alter table "public"."Sessions" enable row level security;

create table "public"."Teammates" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "belt" numeric not null default '1'::numeric,
    "user_id" uuid not null default auth.uid(),
    "is_coach" boolean default false
);


alter table "public"."Teammates" enable row level security;

CREATE UNIQUE INDEX "Rolls_pkey" ON public."Rolls" USING btree (id);

CREATE UNIQUE INDEX "Sessions_pkey" ON public."Sessions" USING btree (id);

CREATE UNIQUE INDEX "Teammates_pkey" ON public."Teammates" USING btree (id);

alter table "public"."Rolls" add constraint "Rolls_pkey" PRIMARY KEY using index "Rolls_pkey";

alter table "public"."Sessions" add constraint "Sessions_pkey" PRIMARY KEY using index "Sessions_pkey";

alter table "public"."Teammates" add constraint "Teammates_pkey" PRIMARY KEY using index "Teammates_pkey";

alter table "public"."Rolls" add constraint "Rolls_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."Rolls" validate constraint "Rolls_owner_id_fkey";

alter table "public"."Rolls" add constraint "Rolls_session_fkey" FOREIGN KEY (session) REFERENCES "Sessions"(id) ON DELETE CASCADE not valid;

alter table "public"."Rolls" validate constraint "Rolls_session_fkey";

alter table "public"."Rolls" add constraint "Rolls_teammate_id_fkey" FOREIGN KEY (teammate_id) REFERENCES "Teammates"(id) ON DELETE SET NULL not valid;

alter table "public"."Rolls" validate constraint "Rolls_teammate_id_fkey";

alter table "public"."Sessions" add constraint "Sessions_coach_fkey" FOREIGN KEY (coach) REFERENCES "Teammates"(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."Sessions" validate constraint "Sessions_coach_fkey";

alter table "public"."Sessions" add constraint "Sessions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."Sessions" validate constraint "Sessions_user_id_fkey";

alter table "public"."Teammates" add constraint "Teammates_belt_check" CHECK ((belt > (0)::numeric)) not valid;

alter table "public"."Teammates" validate constraint "Teammates_belt_check";

alter table "public"."Teammates" add constraint "Teammates_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."Teammates" validate constraint "Teammates_user_id_fkey";

grant delete on table "public"."Rolls" to "anon";

grant insert on table "public"."Rolls" to "anon";

grant references on table "public"."Rolls" to "anon";

grant select on table "public"."Rolls" to "anon";

grant trigger on table "public"."Rolls" to "anon";

grant truncate on table "public"."Rolls" to "anon";

grant update on table "public"."Rolls" to "anon";

grant delete on table "public"."Rolls" to "authenticated";

grant insert on table "public"."Rolls" to "authenticated";

grant references on table "public"."Rolls" to "authenticated";

grant select on table "public"."Rolls" to "authenticated";

grant trigger on table "public"."Rolls" to "authenticated";

grant truncate on table "public"."Rolls" to "authenticated";

grant update on table "public"."Rolls" to "authenticated";

grant delete on table "public"."Rolls" to "service_role";

grant insert on table "public"."Rolls" to "service_role";

grant references on table "public"."Rolls" to "service_role";

grant select on table "public"."Rolls" to "service_role";

grant trigger on table "public"."Rolls" to "service_role";

grant truncate on table "public"."Rolls" to "service_role";

grant update on table "public"."Rolls" to "service_role";

grant delete on table "public"."Sessions" to "anon";

grant insert on table "public"."Sessions" to "anon";

grant references on table "public"."Sessions" to "anon";

grant select on table "public"."Sessions" to "anon";

grant trigger on table "public"."Sessions" to "anon";

grant truncate on table "public"."Sessions" to "anon";

grant update on table "public"."Sessions" to "anon";

grant delete on table "public"."Sessions" to "authenticated";

grant insert on table "public"."Sessions" to "authenticated";

grant references on table "public"."Sessions" to "authenticated";

grant select on table "public"."Sessions" to "authenticated";

grant trigger on table "public"."Sessions" to "authenticated";

grant truncate on table "public"."Sessions" to "authenticated";

grant update on table "public"."Sessions" to "authenticated";

grant delete on table "public"."Sessions" to "service_role";

grant insert on table "public"."Sessions" to "service_role";

grant references on table "public"."Sessions" to "service_role";

grant select on table "public"."Sessions" to "service_role";

grant trigger on table "public"."Sessions" to "service_role";

grant truncate on table "public"."Sessions" to "service_role";

grant update on table "public"."Sessions" to "service_role";

grant delete on table "public"."Teammates" to "anon";

grant insert on table "public"."Teammates" to "anon";

grant references on table "public"."Teammates" to "anon";

grant select on table "public"."Teammates" to "anon";

grant trigger on table "public"."Teammates" to "anon";

grant truncate on table "public"."Teammates" to "anon";

grant update on table "public"."Teammates" to "anon";

grant delete on table "public"."Teammates" to "authenticated";

grant insert on table "public"."Teammates" to "authenticated";

grant references on table "public"."Teammates" to "authenticated";

grant select on table "public"."Teammates" to "authenticated";

grant trigger on table "public"."Teammates" to "authenticated";

grant truncate on table "public"."Teammates" to "authenticated";

grant update on table "public"."Teammates" to "authenticated";

grant delete on table "public"."Teammates" to "service_role";

grant insert on table "public"."Teammates" to "service_role";

grant references on table "public"."Teammates" to "service_role";

grant select on table "public"."Teammates" to "service_role";

grant trigger on table "public"."Teammates" to "service_role";

grant truncate on table "public"."Teammates" to "service_role";

grant update on table "public"."Teammates" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."Rolls"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable insert for authenticated users only"
on "public"."Rolls"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."Rolls"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable delete for users based on user_id"
on "public"."Sessions"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."Sessions"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for users based on user_id"
on "public"."Sessions"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."Sessions"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users only"
on "public"."Teammates"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."Teammates"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



